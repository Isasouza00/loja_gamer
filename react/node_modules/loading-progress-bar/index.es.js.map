{"version":3,"file":"index.es.js","sources":["../src/index.tsx"],"sourcesContent":["import { EG, useState, useEffect } from '@web-companions/fc';\nimport type { TypeConstructor } from '@web-companions/fc/common.model';\n\nconst html = String.raw;\nconst css = String.raw;\n\nexport interface LoadingProgressBarConfig {\n  stepsCount: number; // (1 by default)\n  duration: number; // ms (2000ms by default)\n}\n\nexport interface LoadingProgressBarHTMLElement extends HTMLElement {\n  generateProgress?: Generator;\n  togglePause?: (isPause?: boolean) => void;\n  ref?: { current?: any };\n  config?: LoadingProgressBarConfig;\n}\n\nexport const loadingProgressBar = EG({\n  props: {\n    config: {\n      type: {} as TypeConstructor<LoadingProgressBarConfig>,\n      default: {\n        duration: 2000,\n        stepsCount: 1,\n      },\n    },\n    color: {\n      type: String,\n      attribute: 'color',\n      default: '#ef534e',\n    },\n  },\n  render: (t: { template: string; style: string }, c) => {\n    const inner = (c as ShadowRoot).innerHTML;\n    if (inner !== t.template) {\n      (c as ShadowRoot).innerHTML = t.template;\n    }\n\n    const sheet = new CSSStyleSheet();\n    sheet['replaceSync'](t.style);\n    (c as ShadowRoot)['adoptedStyleSheets'] = [sheet];\n  },\n  shadow: {\n    mode: 'open',\n  },\n})(function (this: LoadingProgressBarHTMLElement, props) {\n  const [isPause, setIsPause] = useState(false);\n  const [keyframes, setKeyframes] = useState();\n  const [animationName, setAnimationName] = useState();\n  const animationDuration = props.config.duration;\n\n  useEffect(() => {\n    const stepsCount = props.config.stepsCount;\n    const k = 100 / stepsCount;\n\n    let _keyframes = '';\n    for (let i = 0; i < stepsCount; i++) {\n      const keyframeName = ` loadingPB_${i * k}`;\n      _keyframes =\n        _keyframes +\n        ' ' +\n        css`\n          /* clean-css ignore:start */\n          @keyframes ${keyframeName} {\n            from {\n              width: ${i * k + '%'};\n            }\n            to {\n              width: ${(i + 1) * k + '%'};\n            }\n          }\n          /* clean-css ignore:end */\n        `;\n    }\n    setKeyframes(_keyframes);\n\n    let index = 0;\n    const generator = function* () {\n      while (true) {\n        if (index < stepsCount) {\n          setAnimationName(`loadingPB_${index * k}`);\n          yield ++index;\n        } else {\n          setIsPause(false);\n          setAnimationName(undefined);\n          index = 0;\n          yield index;\n        }\n      }\n    };\n\n    this.ref = this.ref || {};\n    this.ref.current = this;\n    this.generateProgress = generator();\n    this.togglePause = (pause?: boolean) => setIsPause((hasPause) => (typeof pause === 'boolean' ? pause : !hasPause));\n  }, [props.config]);\n\n  return {\n    style: css`\n      /* dynamic keyframes */\n      ${keyframes}\n\n      .lpb {\n        animation-timing-function: cubic-bezier(0.55, 0, 1, 0.45);\n        animation-fill-mode: both;\n        background: ${props.color};\n        height: 3px;\n        left: 0;\n        top: 0;\n        width: 0%;\n        z-index: 9999;\n        position: fixed;\n        animation-name: ${animationName};\n        animation-duration: ${animationDuration + 'ms'};\n        animation-play-state: ${isPause ? 'paused' : 'running'};\n      }\n\n      .lpb:after {\n        display: ${animationName !== undefined ? 'block' : 'none'};\n        position: absolute;\n        content: '';\n        right: 0px;\n        width: 100px;\n        height: 100%;\n        box-shadow: ${`0 0 10px ${props.color}, 0 0 5px ${props.color}`};\n        opacity: 1;\n        transform: rotate(3deg) translate(0px, -4px);\n      }\n    `,\n    template: <div class=\"lpb\"></div>,\n  };\n});\n"],"names":["html","String","raw","css","loadingProgressBar","EG","props","config","type","default","duration","stepsCount","color","attribute","render","t","c","innerHTML","template","sheet","CSSStyleSheet","style","shadow","mode","isPause","setIsPause","useState","keyframes","setKeyframes","animationName","setAnimationName","animationDuration","useEffect","k","_keyframes","i","ref","this"],"mappings":"qEAGA,MAAMA,EAAOC,OAAOC,IACdC,EAAMF,OAAOC,IAcNE,EAAqBC,EAAG,CACnCC,MAAO,CACLC,OAAQ,CACNC,KAAM,GACNC,QAAS,CACPC,SAAU,IACVC,WAAY,IAGhBC,MAAO,CACLJ,KAAMP,OACNY,UAAW,QACXJ,QAAS,YAGbK,OAAQ,CAACC,EAAwCC,KAChCA,EAAiBC,YAClBF,EAAEG,WACbF,EAAiBC,UAAYF,EAAEG,gBAG5BC,EAAQ,IAAIC,cAClBD,EAAK,YAAgBJ,EAAEM,OACtBL,EAAgB,mBAAyB,CAACG,IAE7CG,OAAQ,CACNC,KAAM,SA1BwBlB,EA4B/B,SAA+CC,SACzCkB,EAASC,GAAcC,GAAS,IAChCC,EAAWC,GAAgBF,KAC3BG,EAAeC,GAAoBJ,IACpCK,EAAoBzB,EAAMC,OAAOG,gBAEvCsB,GAAU,WACFrB,EAAaL,EAAMC,OAAOI,WAC1BsB,EAAI,IAAMtB,MAEZuB,EAAa,OACZ,IAAIC,EAAI,EAAGA,EAAIxB,EAAYwB,IAAK,CAEnCD,EACEA,EACA,IACA/B,4BAJiCgC,EAAIF,wEAsBrCG,IAGOC"}
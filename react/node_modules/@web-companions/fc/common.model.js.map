{"version":3,"file":"common.model.js","sourceRoot":"","sources":["../src/common.model.ts"],"names":[],"mappings":"","sourcesContent":["interface Type<T> {\n  valueOf(): T;\n}\n\nexport interface TypeConstructor<G> {\n  new (value?: any): Type<G>;\n  <T>(value?: T): G;\n}\n\nexport type ConstructorTypes = StringConstructor | BooleanConstructor | NumberConstructor | ArrayConstructor; //| ObjectConstructor;\n\nexport type ElementConfigProp<T extends TypeConstructor<PX>, PX> = {\n  type: TypeConstructor<PX> extends T ? T : TypeConstructor<PX>;\n  default?: PX extends ReturnType<T> ? PX : ReturnType<T>;\n  attribute?: string;\n};\n\nexport type ElementProperties<P> = {\n  [x in keyof P]: ElementConfigProp<TypeConstructor<P[x]>, P[x]> | TypeConstructor<P[x]>;\n};\n\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<T>;\nexport type Filter<T, U> = T extends U ? T : never;\n\nexport type ComponentFunc<P> = (props: P) => unknown | void;\n\nexport type AdapterFunc<P, T> = (elTagName: string, props?: P) => T;\n\nexport type ElementMapper<P> = (state: P, key: keyof P, value: any, attribute?: string | undefined) => P;\nexport type ElementRender<T> = (template: T, container: Element | ShadowRoot | DocumentFragment) => void;\n\nexport interface ElementIniConfig<P, PP, RT> {\n  render: ElementRender<RT>;\n  props?: (ElementProperties<P> & PP) | undefined;\n  mapper?: ElementMapper<P> | undefined;\n  shadow?: ShadowRootInit | undefined;\n}\n\nexport type NodeRender<T> = (template: T, ref: { current: object | Node | null }) => any;\n\nexport interface NodeIniConfig<T> {\n  render: NodeRender<T>;\n}\n\nexport type ElementComponentProps<OP> = OP & {\n  ref?: { current: object | Node | null };\n  // Global attributes\n  accesskey?: string;\n  autocapitalize?: string;\n  class?: string;\n  contenteditable?: boolean;\n  contextmenu?: string;\n  dir?: string;\n  draggable?: boolean;\n  dropzone?: string;\n  exportparts?: string;\n  hidden?: boolean;\n  id?: string;\n  inputmode?: string;\n  is?: string;\n  itemid?: string;\n  itemprop?: string;\n  itemref?: string;\n  itemscope?: string;\n  itemtype?: string;\n  lang?: string;\n  part?: string;\n  role?: string;\n  slot?: string;\n  spellcheck?: boolean;\n  style?: string;\n  tabindex?: number;\n  title?: string;\n  translate?: string;\n} & Partial<Omit<GlobalEventHandlers, 'addEventListener' | 'removeEventListener'>>;\n\nexport interface ElementComponent<E, OP> {\n  (_p: ElementComponentProps<OP>): any;\n  element: E;\n  adapter<T>(func: AdapterFunc<OP, T>, defaultProps?: OP): T;\n}\n"]}
export declare function AF<T extends Function, R>(fns: T, cb: (r: any) => R): {
    (this: any, ...args: any[]): R;
    reset: () => void;
};
export declare function useState<T>(initialVal?: T | ((v: T) => T)): [T, (data: T | ((v: T) => T)) => T];
export declare function useReducer<T>(reducer: {
    (prevVal: any, vOrFn: any): any;
    (arg0: any, arg1: any): any;
}, initialVal?: T | ((v: T) => T), ...initialReduction: undefined[]): [T, (data: T | ((v: T) => T)) => T];
export declare function useEffect(fn: () => any, ...guards: any[][]): void;
export declare function useMemo<T>(fn: () => T, ...inputGuards: (any | {
    (): any;
})[]): any;
export declare function useCallback<T>(fn: T, ...inputGuards: any[]): T;
export declare function useRef<T>(initialValue: T): {
    current: T;
};
//# sourceMappingURL=hooks.d.ts.map